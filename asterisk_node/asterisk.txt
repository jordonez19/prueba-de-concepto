//const AmiClient = require('asterisk-manager');
import AmiClient from 'asterisk-manager';

class AsteriskCaller {
    constructor(config = {}) {
        this.config = {
            host: '3.86.251.200',
            port: 5038,
            username: 'xavi_ami',
            password: 'password'
        };

        this.ami = new AmiClient(
            this.config.port,
            this.config.host,
            this.config.username,
            this.config.password,
            true
        );

        // Configurar manejadores de eventos bÃ¡sicos
        this.ami.on('connect', () => console.log('Conectado a Asterisk AMI'));
        this.ami.on('error', (err) => console.error('Error AMI:', err));
    }

    connect() {
        return new Promise((resolve, reject) => {
            this.ami.on('connect', () => resolve(true));
            this.ami.on('error', (err) => reject(err));
            this.ami.connect();
        });
    }

    makeCall(numberToCall, extensionToConnect) {
        return new Promise((resolve, reject) => {
            const originateParams = {
                Action: 'Originate',
                Channel: `PJSIP/netelip_trunk/${numberToCall}`, 
                Context: 'from-internal',
                Exten: extensionToConnect,
                Priority: 1,
                Callerid: 'plurall',
                Async: 'yes',
                Variable: `CHANNEL_DIRECTION=Outbound,AUTO_ANSWER=true`
            };

            this.ami.action(originateParams, (err, res) => {
                if (err) {
                    console.error('Error al originar llamada:', err);
                    reject(err);
                } else {
                    console.log('Respuesta de originate:', res);
                    resolve(res);
                }
            });

            // Escuchar eventos relacionados con la llamada
            this.ami.on('managerevent', (event) => {
                console.log('Evento:', event.event);
                switch (event.event) {
                    case 'OriginateResponse':
                        console.log('Estado de la llamada:', event.response);
                        break;
                    case 'Hangup':
                        console.log('Llamada terminada:', event.cause);
                        break;
                    case 'Bridge':
                        console.log('Llamada conectada al puente');
                        break;
                }
            });
        });
    }

    disconnect() {
        if (this.ami) {
            this.ami.disconnect();
        }
    }
}

// Ejemplo de uso
async function main() {
    const caller = new AsteriskCaller({
        host: '3.86.251.200',
        port: 5038,
        username: 'xavi_ami',
        password: 'password'
    });

    try {
        await caller.connect();

        const result = await caller.makeCall('3007845300', '1002');
        console.log('Llamada iniciada:', result);

        // Mantener el script corriendo para recibir eventos
        setTimeout(() => {
            caller.disconnect();
            process.exit(0);
        }, 30000); // Esperar 30 segundos antes de terminar

    } catch (error) {
        console.error('Error:', error);
        caller.disconnect();
        process.exit(1);
    }
}

// Ejecutar el ejemplo si se llama directamente
if (require.main === module) {
    main();
}

module.exports = AsteriskCaller;